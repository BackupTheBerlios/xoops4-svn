<?php
/**
* xoops_opal_Theme component class file
*
* @copyright	The Xoops project http://www.xoops.org/
* @license      http://www.fsf.org/copyleft/gpl.html GNU public license
* @author       Skalpa Keo <skalpa@xoops.org>
* @since        2.3.0
* @version		$Id$
* @package 		xoops_opal
* @subpackage 	xoops_opal_Theme
*/

/**
* xoops_opal_ThemeFactory
*
* @author 		Skalpa Keo
* @package		xoops_opal
* @subpackage	xoops_opal_Theme
* @since        2.3.0
*/
class xoops_opal_ThemeFactory {
	/**
	 * Currently enabled themes (if empty, all the themes in themes/ are allowed)
	 * @var array
	 */
	var $allowedThemes = array();
	/**
	 * Default theme to instanciate if none specified
	 * @var string
	 */
	var $defaultTheme = 'default';
	/**
	 * If users are allowed to choose a custom theme
	 * @var bool
	 */
	var $allowUserSelection = true;

	/**
	 * Instanciate the specified theme
	 */
	function &createInstance( $options = array(), $initArgs = array() ) {
		// Grab the theme folder from request vars if present
		if ( @empty( $options['folderName'] ) && ( $req = @$_REQUEST['_xo_theme_name'] ) ) {
			if ( $this->isThemeAllowed( $req ) ) {
				$options['folderName'] = $req;
				if ( isset( $_SESSION ) && $this->allowUserSelection ) {
					$_SESSION[ $this->xoBundleIdentifier ]['defaultTheme'] = $req;
	    		}
	    	}
		} elseif ( isset( $_SESSION[ $this->xoBundleIdentifier ]['defaultTheme'] ) ) {
			$options['folderName'] = $_SESSION[ $this->xoBundleIdentifier ]['defaultTheme'];
		} elseif ( @empty( $options['folderName'] ) || !$this->isThemeAllowed( $options['folderName'] ) ) {
			$options['folderName'] = $this->defaultTheme;
		}
		// Retrieve the desired content-type from the request
		if ( @empty( $options['contentType'] ) && !empty($_REQUEST['_xo_mime_type']) ) {
   			$options['contentType'] = $_REQUEST['_xo_mime_type'];
		}

		// Read the theme bundle info file
		global $xoops;
		$options['path'] = $xoops->path( '/themes/' . $options['folderName'] );
		if ( $info = @include( $options['path'] . "/xo-info.php" ) ) {
			$options = array_merge( $info, $options );
		} else {
			$options['themeAPI'] = '2.0';
			$options['parentTheme'] = ( $options['folderName'] == 'xoops20' ? '' : 'xoops20' );
		}
		$inst =& XOS::createInstanceOf( 'xoops_opal_Theme', $options );
		
		return $inst;
	}

	/**
	 * Checks if the specified theme is enabled or not
	 * @param string $name
	 * @return bool
	 */
	function isThemeAllowed( $name ) {
		return ( empty( $this->allowedThemes ) || in_array( $name, $this->allowedThemes ) );
	}
	
	/**
	 * List the available themes
	 *
	 * @param	boolean $allowed Whether to return the allowed themes, or all of them
	 *  @return	array
	 */
	function enumerate( $allowed = true ) {
		global $xoops;
		$themes = array();
		if ( $dh = opendir( $xoops->path('/themes/') ) ) {
			while ( $file = readdir($dh) ) {
				if ( $file{0} != '.' && $file != 'CVS' ) {
					$themes[] = $file;
				}
			}
			closedir( $dh );
		}
		if ( !empty($this->allowedThemes) && $allowed ) {
			return array_intersect( $themes, $this->allowedThemes );
		}
		return $themes;
	}

}

class xoops_opal_Theme {
   /**
    * The name of this theme
    * @var string
    */
	var $folderName = '';
   /**
    * Physical path of this theme folder
    * @var string
    */
	var $path = '';
	var $url = '';

	/**
	* Default content-type of pages generated by this theme
	* @var string
	*/
	var $contentType = '';
	/**
	* Output format doctype
	* @var string
	*/
	var $doctype = 'html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"';
	/**
	* Document namespaces
	* @var string
	*/
	var $namespaces = array();

   /**
    * Whether or not the theme engine should include the output generated by php
    * @var string
    */
	var $bufferOutput = true;
	/**
	* Canvas-level template to use
	* @var string
	*/
	var $canvasTemplate = '';
	/**
	* Page-level template to use
	* @var string
	*/
	var $pageTemplate = '';
	/**
	* Content-level template to use
	* @var string
	*/
	var $contentTemplate = '';
	/**
	* Text content to display right after the contentTemplate output
	* @var string
	*/
	var $content = '';
	/**
	* The API version supported by this theme (used to achieve BC)
	* @var string
	*/
	var $themeAPI = '2.3';
	/**
	* Name of this theme parent (if any)
	* @var string
	*/
	var $parentTheme = '';
	/**
	* Array containing all this theme ancestors (parent,grand-parent,etc...)
	* @var array
	* @access protected
	*/
	var $parentInfos = array();
	/**
	* Page construction plug-ins to use
	* @var array
	* @access public
	*/
	var $plugins = array( 'xoops_logos_PageBuilder' );
	
	/**
	 * List of mime-types supported by this theme
	 * @var array
	 * @access public
	 */
	var $supportedMimeTypes = '';
	var $allowXHTML = true;
	
	var $renderCount = 0;
	/**
	 * Pointer to the theme template engine
	 *
	 * @var object
	 */
	var $template = false;
	
	var $metas = array( 'meta' => array(), 'link' => array() );
	
   /**#@-*/

	/**#@+ @tasktype 10 Initialization*/
	/**
	 * Initializes this theme
	 *
	 * Upon initialization, the theme creates its template engine and instanciates the
	 * plug-ins from the specified {@link $plugins} list. If the theme is a 2.0 theme, that does not
	 * display redirection messages, the HTTP redirections system is disabled to ensure users will
	 * see the redirection screen.
	 * 
	 * @param array $options
	 * @return bool
	 */
   function xoInit( $options = array() ) {
		global $xoops;

		if ( isset( $_SESSION ) ) {
			$_SESSION[$xoops->services['http']->xoBundleIdentifier]['tmpDisallowRedirections'] = ( $this->themeAPI == '2.0' );
		}
		if ( $this->namespaces && !is_array( $this->namespaces ) ) {
			$this->namespaces = array( '' => $this->namespaces );
		}
		if ( $this->supportedMimeTypes && !is_array( $this->supportedMimeTypes ) ) {
			$this->supportedMimeTypes = explode( ",", $this->supportedMimeTypes );
		}

		if ( !$this->contentType || !in_array( $this->contentType, $this->supportedMimeTypes ) ) {
			$this->contentType = $this->supportedMimeTypes[0];
		}
		if ( $this->contentType == 'application/xhtml+xml' ) {
			if ( !$this->allowXHTML || false === strpos( $_SERVER['HTTP_ACCEPT'], 'application/xhtml+xml' ) ) {
				$this->contentType = 'text/html';
			}
		}

		$this->template =& XOS::create( 'xoops_opal_Smarty' );
		$this->template->currentTheme =& $this;
		$this->template->compile_id = '';
		
		if ( $this->bufferOutput ) {
			ob_start();
		}
		// Instanciate and initialize all the theme plugins
		foreach ( $this->plugins as $k => $bundleId ) {
			$this->plugins[$k] =& XOS::create( $bundleId, array( 'theme' => &$this ) );
		}
		return true;
	}
	/**#@-*/
	
	/**#@+ @tasktype 20 Manipulating page meta-iformation*/
    /**
    * Adds script code to the document head
    *
    * This methods allows the insertion of an external script file (if $src is provided), or
    * of a script snippet. The file URI is parsed to take benefit of the theme resource
    * overloading system.
    * 
    * The $attributes parameter allows you to specify the attributes that will be added to the 
    * inserted <script> tag. If unspecified, the <var>type</var> attribute value will default to
    * 'text/javascript'.
    * 
    * <code>
    * // Add an external script using a physical path (not recommended)
    * $theme->addScript( '/www/script.js', null, '' );
    * // Add an external script that belongs to a component
    * $theme->addScript( 'xoops_pyro_TreeWidget#www/script.js', null, '' );
    * $theme->addScript( 'mod_xoops_SiteManager#common.js', null, '' );
    * // Specify attributes for the <script> tag
    * $theme->addScript( 'mod_xoops_SiteManager#common.js', array( 'type' => 'application/x-javascript' ), '' );
    * // Insert a code snippet
    * $theme->addScript( null, array( 'type' => 'application/x-javascript' ), 'window.open("Hello world");' );
    * </code>
    * 
    * @param string $src path to an external script file
    * @param array $attributes hash of attributes to add to the <script> tag
    * @param string $content Code snippet to output within the <script> tag
    *
    * @return void
    **/
    function addScript( $src = '', $attributes = array(), $content = '' ) {
    	global $xoops;
		if ( !empty( $src ) ) {
			$attributes['src'] = $xoops->url( $this->resourcePath( $src ) );
		}
		if ( !empty( $content ) ) {
			$attributes['_'] = $content;
		}
		if ( !isset( $attributes['type'] ) ) {
			$attributes['type'] = 'text/javascript';
		}
		$this->setMeta( 'script', $src, $attributes );
    }

    /**
    * Add StyleSheet or CSS code to the document head
    *
    * @param string $src path to .css file
    * @param array $attributes name => value paired array of attributes such as title
    * @param string $content CSS code to output between the <style> tags (in case $src is empty)
    *
    * @return void
    **/
    function addStylesheet( $src = '', $attributes = array(), $content = '' ) {
    	global $xoops;
		if ( !empty( $src ) ) {
			$attributes['href'] = $xoops->url( $this->resourcePath( $src ) );
		}
		if ( !isset($attributes['type']) ) {
			$attributes['type'] = 'text/css';
		}
		if ( !empty( $content ) ) {
			$attributes['_'] = $content;
		}
    	$this->setMeta( 'stylesheet', $src, $attributes );
    }
	/**
	 * Add a <link> to the header
	 * 
	 * @param string	$rel		Relationship from the current doc to the anchored one
	 * @param string	$href		URI of the anchored document
	 * @param array		$attributes	Additional attributes to add to the <link> element
	 */
	function addLink( $rel, $href = '', $attributes = array() ) {
		global $xoops;
		if ( !empty( $href ) ) {
			$attributes['href'] = $href;
		}
		$this->setMeta( 'link', $rel, $attributes );
	}
    
	/**
	 * Change output page meta-information
	 */
    function setMeta( $type = 'meta', $name = '', $value = '' ) {
		if ( !isset( $this->metas[$type] ) ) {
			$this->metas[$type] = array();
		}
    	if ( isset($name) ) {
			$this->metas[$type][$name] = $value;
		} else {
			$this->metas[$type][] = 	$value;
		}
		return $value;
    }
	


	/**
	 * Returns the document namespaces as an xmlns string that can be inserted in the main tag
	 */	
	function namespacesString() {
		$str = array();
		foreach ( $this->namespaces as $ns => $uri ) {
			if ( !empty( $ns ) ) {
				$ns = ':' . $ns;
			}
			$str[] = 'xmlns' . $ns . '="' . $uri . '"';
		}
		return implode( ' ', $str );
	}
	/**#@-*/
	
	/**
	 * Render the page
	 *
	 * The theme engine builds pages from 3 templates: canvas, page and content.
	 * 
	 * The canvas template is the outermost one. It is the one containing the html container
	 * elements (html,head,body), the header, footer and the left and right columns.
	 * 
	 * Standard themes should be delivered with the following canvas templates:
	 * - canvas-default.xotpl: The "normal" template, used by most pages on a site
	 * - canvas-dialog.xotpl: A lightweight canvas, without left and right columns, used by popups
	 * - canvas-email.xotpl: The canvas used by e-mails sent by the site
	 * 
	 * The page template is the container for center blocks and the content. Themes don't have to
	 * include several page templates, but applications may have their own page template that is
	 * used instead of the default one (i.e: the XOOPS Management module).
	 * 
	 * A module can call this method directly and specify what templates the theme engine must use.
	 * If render() hasn't been called before, the theme defaults will be used for the canvas and
	 * page template (and xoopsOption['template_main'] for the content).
	 * 
	 * @param string $canvasTpl		The canvas template, if different from the theme default
	 * @param string $pageTpl		The page template, if different from the theme default
	 * @param string $contentTpl	The content template
	 * @param array	 $vars			Template variables to send to the template engine
	 */
	function render( $canvasTpl = null, $pageTpl = null, $contentTpl = null, $vars = array() ) {
		global $xoops;

		$this->template->compile_id = $this->folderName . '-' . substr( $this->contentType, strrpos( $this->contentType, '/' ) + 1 );

		if ( !$this->renderCount && $this->bufferOutput ) {
			$this->content .= ob_get_contents();
			ob_end_clean();
		}

		if ( $this->contentType == 'application/pdf' ) {
			$pdfmaker =& XOS::create( 'xoops_opal_PdfMaker' );
			$pdfmaker->startCapture();
			$xoops->services['logger']->activated = false;
			
		}


		if ( $this->themeAPI != '2.3' ) {
			include $xoops->path( $this->xoBundleRoot . '/render-' . $this->themeAPI . '.php' );
		}
		
		if ( !empty($canvasTpl) ) {
			$this->canvasTemplate = $canvasTpl;
		}
		if ( !empty($pageTpl) ) {
			$this->pageTemplate = $pageTpl;
		}
		if ( !empty($contentTpl) ) {
			$this->contentTemplate = $contentTpl;
		}
		$vars['xoTheme']	=& $this;
		/* this will be changed */
		$vars['xoops_dirname'] = @!empty( $GLOBALS['xoopsModule'] ) ? $GLOBALS['xoopsModule']->getVar('dirname') : 'system';
		$this->template->assign( $vars );
		
		if ( $xoops->services['http'] ) {
			$xoops->services['http']->setEntityInfo( $this->contentType, 'iso-8859-1' );
			$xoops->services['http']->addVariation( 'xo-theme', $this->xoBundleIdentifier );
		}
		$this->renderZone( 'canvas' );
		$this->renderCount++;
	}
	
	/**
	 * Render the specified page part
	 * 
	 * @param string $zone
	 */
	function renderZone( $zone ) {
		switch ( $zone ) {
		case 'canvas':
			$this->renderCanvas();
			break;
		case 'page':
			$this->renderPage();
			echo $this->pageContent;
			break;
		case 'content':
			$this->renderContent();
		}
	}
	
	function renderCanvas() {
		$this->renderPage();
		$this->template->display( $this->getZoneTemplate( 'canvas' ) );
	}

	function renderPage() {
		ob_start();
		if ( $tpl = $this->getZoneTemplate( 'page' ) ) {
			$this->template->display( $tpl );
		} else {
			$this->renderContent();
		}
		$this->pageContent = ob_get_contents();
		ob_end_clean();
	}

	function renderContent() {
		if ( $tpl = $this->getZoneTemplate( 'content' ) ) {
			$this->template->display( $tpl );
		}
		if ( !empty($this->content) ) {
			echo $this->content;
		}
	}
	
	function getZoneTemplate( $zone ) {
		global $xoops;
		$zones = array( 'canvas' => 0, 'page' => 1, 'content' => 2 );
		$tpl = '';
		if ( isset( $zones[$zone] ) ) {
			$tpl = $zone . 'Template';
			$tpl = $this->$tpl;
			if ( !empty( $tpl ) ) {
				if ( substr( $tpl, 0, 1 ) == '.' ) {
					$tpl = $xoops->path( $this->resourcePath( substr( $tpl, 1 ) ) );
				} elseif ( !strpos( $tpl, ':' ) ) {
					$tpl = 'xotpl:' . $tpl;
				}
			}
		}
		return $tpl;
	}
	
	

	function renderAttributes( $coll ) {
		$str = '';
		foreach ( $coll as $name => $val ) {
			if ( $name != '_' ) {
				$str .= ' ' . $name . '="' . htmlspecialchars( $val, ENT_QUOTES ) . '"';
			}
		}
		return $str;
	}
	
	
	function resourcePath( $path, $fromDocRoot = true ) {
		global $xoops;
		
		$parts = explode( '#', $path, 2 );
		if ( count( $parts ) > 1 ) {
			list( $bundleId, $resPath ) = $parts;
			// This is component resource: modules are in 'modules', and components in 'components'
			$themedRoot = ( substr( $parts[0], 0, 4 ) == 'mod_' ) ? 'modules' : 'components';
			if ( file_exists( "$this->path/$themedRoot/$bundleId/$resPath" ) ) {
				return "themes/$this->folderName/$themedRoot/$bundleId/$resPath";
			} else {
				return XOS::classVar( $bundleId, 'xoBundleRoot' ) . '/' . $resPath;
			}
		}		
		if ( substr( $path, 0, 1 ) == '/' ) {
			$path = substr( $path, 1 );
			$fromDocRoot = false;
		}
		if ( file_exists( "$this->path/$path" ) ) {
			return "themes/$this->folderName/$path";
		}
		if ( !empty( $this->parentTheme ) ) {
			if ( !is_object( $this->parentTheme ) ) {
				$this->parentTheme =& XOS::create( 'xoops_opal_Theme', array( 'folderName' => $this->parentTheme ) );
			}
			if ( is_object( $this->parentTheme ) ) {
				return $this->parentTheme->resourcePath( $path, $fromDocRoot );
			}
		}
		return $fromDocRoot ? "www/$path" : "themes/$this->folderName/$path";
	}
	
	
	

}


?>